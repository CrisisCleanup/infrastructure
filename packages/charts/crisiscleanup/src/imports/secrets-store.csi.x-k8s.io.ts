// generated by cdk8s
import { ApiObject, type ApiObjectMetadata, type GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * SecretProviderClass is the Schema for the secretproviderclasses API
 *
 * @schema SecretProviderClass
 */
export class SecretProviderClass extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SecretProviderClass"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'secrets-store.csi.x-k8s.io/v1',
    kind: 'SecretProviderClass',
  }

  /**
   * Renders a Kubernetes manifest for "SecretProviderClass".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SecretProviderClassProps = {}): any {
    return {
      ...SecretProviderClass.GVK,
      ...toJson_SecretProviderClassProps(props),
    };
  }

  /**
   * Defines a "SecretProviderClass" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SecretProviderClassProps = {}) {
    super(scope, id, {
      ...SecretProviderClass.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SecretProviderClass.GVK,
      ...toJson_SecretProviderClassProps(resolved),
    };
  }
}

/**
 * SecretProviderClass is the Schema for the secretproviderclasses API
 *
 * @schema SecretProviderClass
 */
export interface SecretProviderClassProps {
  /**
   * @schema SecretProviderClass#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * SecretProviderClassSpec defines the desired state of SecretProviderClass
   *
   * @schema SecretProviderClass#spec
   */
  readonly spec?: SecretProviderClassSpec;

}

/**
 * Converts an object of type 'SecretProviderClassProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassProps(obj: SecretProviderClassProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SecretProviderClassSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretProviderClassSpec defines the desired state of SecretProviderClass
 *
 * @schema SecretProviderClassSpec
 */
export interface SecretProviderClassSpec {
  /**
   * Configuration for specific provider
   *
   * @schema SecretProviderClassSpec#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * Configuration for provider name
   *
   * @schema SecretProviderClassSpec#provider
   */
  readonly provider?: string;

  /**
   * @schema SecretProviderClassSpec#secretObjects
   */
  readonly secretObjects?: SecretProviderClassSpecSecretObjects[];

}

/**
 * Converts an object of type 'SecretProviderClassSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassSpec(obj: SecretProviderClassSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'provider': obj.provider,
    'secretObjects': obj.secretObjects?.map(y => toJson_SecretProviderClassSpecSecretObjects(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretObject defines the desired state of synced K8s secret objects
 *
 * @schema SecretProviderClassSpecSecretObjects
 */
export interface SecretProviderClassSpecSecretObjects {
  /**
   * annotations of k8s secret object
   *
   * @schema SecretProviderClassSpecSecretObjects#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema SecretProviderClassSpecSecretObjects#data
   */
  readonly data?: SecretProviderClassSpecSecretObjectsData[];

  /**
   * labels of K8s secret object
   *
   * @schema SecretProviderClassSpecSecretObjects#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * name of the K8s secret object
   *
   * @schema SecretProviderClassSpecSecretObjects#secretName
   */
  readonly secretName?: string;

  /**
   * type of K8s secret object
   *
   * @schema SecretProviderClassSpecSecretObjects#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'SecretProviderClassSpecSecretObjects' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassSpecSecretObjects(obj: SecretProviderClassSpecSecretObjects | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'data': obj.data?.map(y => toJson_SecretProviderClassSpecSecretObjectsData(y)),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'secretName': obj.secretName,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretObjectData defines the desired state of synced K8s secret object data
 *
 * @schema SecretProviderClassSpecSecretObjectsData
 */
export interface SecretProviderClassSpecSecretObjectsData {
  /**
   * data field to populate
   *
   * @schema SecretProviderClassSpecSecretObjectsData#key
   */
  readonly key?: string;

  /**
   * name of the object to sync
   *
   * @schema SecretProviderClassSpecSecretObjectsData#objectName
   */
  readonly objectName?: string;

}

/**
 * Converts an object of type 'SecretProviderClassSpecSecretObjectsData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassSpecSecretObjectsData(obj: SecretProviderClassSpecSecretObjectsData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'objectName': obj.objectName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */


/**
 * SecretProviderClass is the Schema for the secretproviderclasses API
 *
 * @schema SecretProviderClassV1Alpha1
 */
export class SecretProviderClassV1Alpha1 extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SecretProviderClassV1Alpha1"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'secrets-store.csi.x-k8s.io/v1alpha1',
    kind: 'SecretProviderClass',
  }

  /**
   * Renders a Kubernetes manifest for "SecretProviderClassV1Alpha1".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: SecretProviderClassV1Alpha1Props = {}): any {
    return {
      ...SecretProviderClassV1Alpha1.GVK,
      ...toJson_SecretProviderClassV1Alpha1Props(props),
    };
  }

  /**
   * Defines a "SecretProviderClassV1Alpha1" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SecretProviderClassV1Alpha1Props = {}) {
    super(scope, id, {
      ...SecretProviderClassV1Alpha1.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...SecretProviderClassV1Alpha1.GVK,
      ...toJson_SecretProviderClassV1Alpha1Props(resolved),
    };
  }
}

/**
 * SecretProviderClass is the Schema for the secretproviderclasses API
 *
 * @schema SecretProviderClassV1Alpha1
 */
export interface SecretProviderClassV1Alpha1Props {
  /**
   * @schema SecretProviderClassV1Alpha1#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * SecretProviderClassSpec defines the desired state of SecretProviderClass
   *
   * @schema SecretProviderClassV1Alpha1#spec
   */
  readonly spec?: SecretProviderClassV1Alpha1Spec;

}

/**
 * Converts an object of type 'SecretProviderClassV1Alpha1Props' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassV1Alpha1Props(obj: SecretProviderClassV1Alpha1Props | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_SecretProviderClassV1Alpha1Spec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretProviderClassSpec defines the desired state of SecretProviderClass
 *
 * @schema SecretProviderClassV1Alpha1Spec
 */
export interface SecretProviderClassV1Alpha1Spec {
  /**
   * Configuration for specific provider
   *
   * @schema SecretProviderClassV1Alpha1Spec#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * Configuration for provider name
   *
   * @schema SecretProviderClassV1Alpha1Spec#provider
   */
  readonly provider?: string;

  /**
   * @schema SecretProviderClassV1Alpha1Spec#secretObjects
   */
  readonly secretObjects?: SecretProviderClassV1Alpha1SpecSecretObjects[];

}

/**
 * Converts an object of type 'SecretProviderClassV1Alpha1Spec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassV1Alpha1Spec(obj: SecretProviderClassV1Alpha1Spec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'parameters': ((obj.parameters) === undefined) ? undefined : (Object.entries(obj.parameters).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'provider': obj.provider,
    'secretObjects': obj.secretObjects?.map(y => toJson_SecretProviderClassV1Alpha1SpecSecretObjects(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretObject defines the desired state of synced K8s secret objects
 *
 * @schema SecretProviderClassV1Alpha1SpecSecretObjects
 */
export interface SecretProviderClassV1Alpha1SpecSecretObjects {
  /**
   * annotations of k8s secret object
   *
   * @schema SecretProviderClassV1Alpha1SpecSecretObjects#annotations
   */
  readonly annotations?: { [key: string]: string };

  /**
   * @schema SecretProviderClassV1Alpha1SpecSecretObjects#data
   */
  readonly data?: SecretProviderClassV1Alpha1SpecSecretObjectsData[];

  /**
   * labels of K8s secret object
   *
   * @schema SecretProviderClassV1Alpha1SpecSecretObjects#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * name of the K8s secret object
   *
   * @schema SecretProviderClassV1Alpha1SpecSecretObjects#secretName
   */
  readonly secretName?: string;

  /**
   * type of K8s secret object
   *
   * @schema SecretProviderClassV1Alpha1SpecSecretObjects#type
   */
  readonly type?: string;

}

/**
 * Converts an object of type 'SecretProviderClassV1Alpha1SpecSecretObjects' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassV1Alpha1SpecSecretObjects(obj: SecretProviderClassV1Alpha1SpecSecretObjects | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'annotations': ((obj.annotations) === undefined) ? undefined : (Object.entries(obj.annotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'data': obj.data?.map(y => toJson_SecretProviderClassV1Alpha1SpecSecretObjectsData(y)),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'secretName': obj.secretName,
    'type': obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SecretObjectData defines the desired state of synced K8s secret object data
 *
 * @schema SecretProviderClassV1Alpha1SpecSecretObjectsData
 */
export interface SecretProviderClassV1Alpha1SpecSecretObjectsData {
  /**
   * data field to populate
   *
   * @schema SecretProviderClassV1Alpha1SpecSecretObjectsData#key
   */
  readonly key?: string;

  /**
   * name of the object to sync
   *
   * @schema SecretProviderClassV1Alpha1SpecSecretObjectsData#objectName
   */
  readonly objectName?: string;

}

/**
 * Converts an object of type 'SecretProviderClassV1Alpha1SpecSecretObjectsData' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_SecretProviderClassV1Alpha1SpecSecretObjectsData(obj: SecretProviderClassV1Alpha1SpecSecretObjectsData | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'objectName': obj.objectName,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

