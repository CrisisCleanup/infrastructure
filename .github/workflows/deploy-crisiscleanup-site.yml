# AUTOMATICALLY GENERATED FILE, DO NOT EDIT MANUALLY.
# Generated by AWS CDK and [cdk-pipelines-github](https://github.com/cdklabs/cdk-pipelines-github)

name: Deploy CrisisCleanup Site
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: Environment to deploy.
        default: development
jobs:
  build-deploy-crisiscleanup-site-synth:
    name: Synthesize
    permissions:
      contents: read
      id-token: write
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    needs: []
    env:
      CI: "true"
      GIGET_AUTH: ${{secrets.GH_CONFIGS_RO_PAT}}
      NX_NON_NATIVE_HASHER: "true"
      NX_BRANCH: ${{github.event.number}}
      NX_RUN_GROUP: ${{github.run_id}}
      NX_CLOUD_ACCESS_TOKEN: ${{secrets.NX_CLOUD_ACCESS_TOKEN}}
      VITE_APP_API_BASE_URL: ${{vars.VITE_APP_API_BASE_URL}}
      VITE_APP_BASE_URL: ${{vars.VITE_APP_BASE_URL}}
      VITE_APP_WS_URL: ${{vars.VITE_APP_WS_URL}}
      VITE_APP_AWS_CCP_URL: ${{vars.VITE_APP_AWS_CCP_URL}}
      VITE_APP_CCP_INSTANCE: ${{vars.VITE_APP_CCP_INSTANCE}}
      VITE_APP_STAGE: ${{vars.VITE_APP_STAGE}}
      VITE_APP_PORTAL_KEY: ${{vars.VITE_APP_PORTAL_KEY}}
      VITE_APP_PHONE_DEFAULT_USERNAME: ${{vars.VITE_APP_PHONE_DEFAULT_USERNAME}}
      VITE_APP_PHONE_DEFAULT_PASSWORD: ${{vars.VITE_APP_PHONE_DEFAULT_PASSWORD}}
      VITE_APP_ENGLISH_PHONE_GATEWAY: ${{vars.VITE_APP_ENGLISH_PHONE_GATEWAY}}
      VITE_APP_SPANISH_PHONE_GATEWAY: ${{vars.VITE_APP_SPANISH_PHONE_GATEWAY}}
      VITE_APP_DEFAULT_CALLER_ID: ${{vars.VITE_APP_DEFAULT_CALLER_ID}}
      VITE_APP_CRISISCLEANUP_WEB_CLIENT_ID: ${{vars.VITE_APP_CRISISCLEANUP_WEB_CLIENT_ID}}
      VITE_APP_WHAT_3_WORDS_API_KEY: ${{secrets.VITE_APP_WHAT_3_WORDS_API_KEY}}
      VITE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN: ${{secrets.VITE_APP_PITNEYBOWES_BASIC_AUTH_TOKEN}}
      VITE_APP_PITNEYBOWES_API_KEY: ${{secrets.VITE_APP_PITNEYBOWES_API_KEY}}
      VITE_APP_GOOGLE_TRANSLATE_API_KEY: ${{secrets.VITE_APP_GOOGLE_TRANSLATE_API_KEY}}
      VITE_APP_GOOGLE_MAPS_API_KEY: ${{secrets.VITE_APP_GOOGLE_MAPS_API_KEY}}
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      CCU_CONFIGS_DECRYPT: "true"
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: CrisisCleanup/infrastructure
          ref: main
      - name: Setup PNPM
        uses: pnpm/action-setup@v2.4.0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: pnpm
      - name: Install SOPs
        uses: CrisisCleanup/mozilla-sops-action@main
        with:
          version: 3.7.3
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        if: runner.arch == 'ARM64' && (inputs.runner && !contains(inputs.runner,
          'ubuntu'))
        with:
          arch: arm64
          version: 2.13.11
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 3.12.2
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Pull cdk.context.json
        continue-on-error: true
        env:
          S3_SOURCE: s3://crisiscleanup-pipeline-assets/cdk-assets/crisiscleanup-web/cdk.context.json
          S3_DESTINATION: packages/stacks/web/cdk.context.json
        run: aws s3 cp ${{env.S3_SOURCE}} ${{env.S3_DESTINATION}}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master
          repository: CrisisCleanup/crisiscleanup-4-web
          path: ${{github.workspace}}/.crisiscleanup-4-web
      - name: Install Web
        working-directory: ${{github.workspace}}/.crisiscleanup-4-web
        run: pnpm --ignore-workspace install
      - name: Build Web
        working-directory: ${{github.workspace}}/.crisiscleanup-4-web
        env:
          NODE_ENV: ${{vars.NODE_ENV}}
        run: pnpm --ignore-workspace build:app
      - name: Install
        run: pnpm install
      - name: Build
        run: |-
          pnpm build
          pnpm -F 'stacks.web' run synth:silent
          cp -r packages/stacks/web/cdk.out ./cdk.out
        env:
          CCU_WEB_SITE_SOURCE: ${{github.workspace}}/.crisiscleanup-4-web/dist
      - name: Push cdk.context.json
        continue-on-error: true
        env:
          S3_SOURCE: packages/stacks/web/cdk.context.json
          S3_DESTINATION: s3://crisiscleanup-pipeline-assets/cdk-assets/crisiscleanup-web/cdk.context.json
        run: aws s3 cp ${{env.S3_SOURCE}} ${{env.S3_DESTINATION}}
      - name: Push cdk.out
        env:
          S3_SOURCE: cdk.out
          S3_DESTINATION: s3://crisiscleanup-pipeline-assets/cdk-assets/crisiscleanup-web/${{github.run_id}}-${{github.run_attempt}}/cdk.out
        run: aws s3 sync ${{env.S3_SOURCE}} ${{env.S3_DESTINATION}}
    environment:
      name: ${{inputs.environment}}
      url: ${{vars.VITE_APP_BASE_URL}}
  publish:
    name: Publish Assets
    permissions:
      contents: read
      id-token: write
    outputs:
      asset-hash1: ${{steps.publish.outputs.asset-hash1}}
      asset-hash10: ${{steps.publish.outputs.asset-hash10}}
      asset-hash11: ${{steps.publish.outputs.asset-hash11}}
      asset-hash12: ${{steps.publish.outputs.asset-hash12}}
      asset-hash13: ${{steps.publish.outputs.asset-hash13}}
      asset-hash2: ${{steps.publish.outputs.asset-hash2}}
      asset-hash3: ${{steps.publish.outputs.asset-hash3}}
      asset-hash4: ${{steps.publish.outputs.asset-hash4}}
      asset-hash5: ${{steps.publish.outputs.asset-hash5}}
      asset-hash6: ${{steps.publish.outputs.asset-hash6}}
      asset-hash7: ${{steps.publish.outputs.asset-hash7}}
      asset-hash8: ${{steps.publish.outputs.asset-hash8}}
      asset-hash9: ${{steps.publish.outputs.asset-hash9}}
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    needs:
      - Build-deploy-crisiscleanup-site-synth
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
        if: inputs.runner && !contains(inputs.runner, 'ubuntu')
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        if: runner.arch == 'ARM64' && (inputs.runner && !contains(inputs.runner,
          'ubuntu'))
        with:
          arch: arm64
          version: 2.13.11
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Pull cdk.out
        env:
          S3_SOURCE: s3://crisiscleanup-pipeline-assets/cdk-assets/crisiscleanup-web/${{github.run_id}}-${{github.run_attempt}}/cdk.out
          S3_DESTINATION: cdk.out
        run: aws s3 sync ${{env.S3_SOURCE}} ${{env.S3_DESTINATION}}
      - name: Install cdk-assets
        run: npm install --no-save cdk-assets
      - name: Publish
        id: publish
        run: >-
          targets="./cdk.out/publish-Assets-FileAsset1-step.sh,./cdk.out/publish-Assets-FileAsset10-step.sh,./cdk.out/publish-Assets-FileAsset11-step.sh,./cdk.out/publish-Assets-FileAsset12-step.sh,./cdk.out/publish-Assets-FileAsset13-step.sh,./cdk.out/publish-Assets-FileAsset2-step.sh,./cdk.out/publish-Assets-FileAsset3-step.sh,./cdk.out/publish-Assets-FileAsset4-step.sh,./cdk.out/publish-Assets-FileAsset5-step.sh,./cdk.out/publish-Assets-FileAsset6-step.sh,./cdk.out/publish-Assets-FileAsset7-step.sh,./cdk.out/publish-Assets-FileAsset8-step.sh,./cdk.out/publish-Assets-FileAsset9-step.sh"

          echo -n "$targets" | xargs -r -d',' -t -n1 -P2 /bin/bash
  deploy-development-crisiscleanup-web-deploy:
    name: Deploy developmentcrisiscleanupweb9069437F
    if: inputs.environment == 'development'
    permissions:
      contents: read
      id-token: write
    environment:
      name: development
      url: https://app.dev.crisiscleanup.io
    needs:
      - Build-deploy-crisiscleanup-site-synth
      - publish
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Assume CDK Deploy Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}:role/cdk-hnb659fds-deploy-role-${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}-us-east-1
          role-external-id: Pipeline
      - id: Deploy
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: crisiscleanup-web
          template: https://cdk-hnb659fds-assets-${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}-us-east-1.s3.us-east-1.amazonaws.com/${{
            needs.publish.outputs.asset-hash1 }}.json
          no-fail-on-empty-changeset: "1"
          role-arn: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}:role/cdk-hnb659fds-cfn-exec-role-${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}-us-east-1
  deploy-staging-crisiscleanup-web-deploy:
    name: Deploy stagingcrisiscleanupweb1118F9DE
    if: inputs.environment == 'staging'
    permissions:
      contents: read
      id-token: write
    environment:
      name: staging
      url: https://app.staging.crisiscleanup.io
    needs:
      - Build-deploy-crisiscleanup-site-synth
      - publish
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Assume CDK Deploy Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_STAGING}}:role/cdk-hnb659fds-deploy-role-${{secrets.AWS_ACCOUNT_ID_STAGING}}-us-east-1
          role-external-id: Pipeline
      - id: Deploy
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: crisiscleanup-web
          template: https://cdk-hnb659fds-assets-${{secrets.AWS_ACCOUNT_ID_STAGING}}-us-east-1.s3.us-east-1.amazonaws.com/${{
            needs.publish.outputs.asset-hash8 }}.json
          no-fail-on-empty-changeset: "1"
          role-arn: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_STAGING}}:role/cdk-hnb659fds-cfn-exec-role-${{secrets.AWS_ACCOUNT_ID_STAGING}}-us-east-1
  deploy-production-crisiscleanup-web-deploy:
    name: Deploy productioncrisiscleanupwebED01140D
    if: inputs.environment == 'production'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production
      url: https://crisiscleanup.org
    needs:
      - Build-deploy-crisiscleanup-site-synth
      - publish
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Assume CDK Deploy Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}:role/cdk-hnb659fds-deploy-role-${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}-us-east-1
          role-external-id: Pipeline
      - id: Deploy
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: crisiscleanup-web
          template: https://cdk-hnb659fds-assets-${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}-us-east-1.s3.us-east-1.amazonaws.com/${{
            needs.publish.outputs.asset-hash9 }}.json
          no-fail-on-empty-changeset: "1"
          role-arn: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}:role/cdk-hnb659fds-cfn-exec-role-${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}-us-east-1
  deploy-production-au-crisiscleanupwebcrisiscleanupwebcertstack02635-dcb-deploy:
    name: Deploy productionaucrisiscleanupwebcrisiscleanupwebcertstack5E9A6897
    if: inputs.environment == 'production-au'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production-au
      url: https://crisiscleanup.org.au
    needs:
      - Build-deploy-crisiscleanup-site-synth
      - publish
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Assume CDK Deploy Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}:role/cdk-hnb659fds-deploy-role-${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}-us-east-1
          role-external-id: Pipeline
      - id: Deploy
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: production-au-crisiscleanupwebcrisiscleanupwebcertstack02635DCB
          template: https://cdk-hnb659fds-assets-${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}-us-east-1.s3.us-east-1.amazonaws.com/${{
            needs.publish.outputs.asset-hash10 }}.json
          no-fail-on-empty-changeset: "1"
          role-arn: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}:role/cdk-hnb659fds-cfn-exec-role-${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}-us-east-1
  deploy-production-au-crisiscleanup-web-deploy:
    name: Deploy productionaucrisiscleanupweb443288D3
    if: inputs.environment == 'production-au'
    permissions:
      contents: read
      id-token: write
    environment:
      name: production-au
      url: https://crisiscleanup.org.au
    needs:
      - Build-deploy-crisiscleanup-site-synth
      - deploy-production-au-crisiscleanupwebcrisiscleanupwebcertstack02635-dcb-deploy
      - publish
    runs-on: ${{inputs.runner || 'ubuntu-latest'}}
    steps:
      - name: Mask values
        run: |-
          echo ::add-mask::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_DEVELOPMENT}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_STAGING}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION}}
          echo ::add-mask::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}
      - name: Authenticate Via OIDC Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ap-southeast-2
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{secrets.AWS_PIPELINE_ACCOUNT_ID}}:role/GitHubActionRole
          role-session-name: deploy-crisiscleanup-site
      - name: Assume CDK Deploy Role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ap-southeast-2
          role-duration-seconds: 1800
          role-skip-session-tagging: true
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}:role/cdk-hnb659fds-deploy-role-${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}-ap-southeast-2
          role-external-id: Pipeline
      - id: Deploy
        uses: aws-actions/aws-cloudformation-github-deploy@v1.2.0
        with:
          name: crisiscleanup-web
          template: https://cdk-hnb659fds-assets-${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}-ap-southeast-2.s3.ap-southeast-2.amazonaws.com/${{
            needs.publish.outputs.asset-hash12 }}.json
          no-fail-on-empty-changeset: "1"
          role-arn: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}:role/cdk-hnb659fds-cfn-exec-role-${{secrets.AWS_ACCOUNT_ID_PRODUCTION_AU}}-ap-southeast-2
concurrency:
  group: deploy-web-${{inputs.environment}}
  cancel-in-progress: false
